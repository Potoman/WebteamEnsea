package com.potoman.tools;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.HttpVersion;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.CoreProtocolPNames;
import org.apache.http.params.DefaultedHttpParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.protocol.HTTP;
import org.json.JSONException;
import org.json.JSONObject;

import com.potoman.webteam.exception.ExceptionServiceConnected;
import com.potoman.webteam.exception.ExceptionServiceServer;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.NetworkInfo.State;

/*
 * Service JSON.
 */

public class CallService {
	
	public static JSONObject getJsonGeth(Context context, String url) throws ExceptionServiceServer, ExceptionServiceConnected {
			L.v("CallService", "Geth:In>"+url);
			if (isConnected(context)) {
				try {
				L.v("CallService", "isConnected");
				JSONObject myjson = null;
				StringBuffer stringBuffer = null;
				try {
					URL urlPage = new URL(url);
					HttpURLConnection connection = (HttpURLConnection) urlPage.openConnection();
					InputStream inputStream = connection.getInputStream();
					BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
					stringBuffer = new StringBuffer();
					String ligne;
					while((ligne = bufferedReader.readLine()) != null) {
						//L.v("CallService", ligne);
						stringBuffer.append(ligne);
					}
					connection.disconnect();
					bufferedReader.close();
					inputStream.close();
				} catch (MalformedURLException e) {
						L.v("CallService", "Geth: MalformedURLException , "+e);
				} catch (IOException e) {
						L.v("CallService", "Geth: IOException , "+e);
				}
				if (stringBuffer.length() > 0) {
					String fin = stringBuffer.toString().substring(stringBuffer.toString().indexOf("{"), stringBuffer.toString().lastIndexOf("}") + 1);
					afficherString(fin);
					int i = 0;
					while (i <= 1) {
						try {
							myjson = new JSONObject(fin);
						} catch (JSONException e) {
							e.printStackTrace();
							L.v("CallService", "Geth: JSONException , " + e);
							fin = fin.replaceAll("<input type=\"hidden\" name=\"sid\" value=\"[a-z0-9]+\" />", "");
						}
						i++;
					}
				}
				else {
					myjson = null;
		
					L.v("CallService", "Geth:Out> null");
				}
				return myjson;
				}
				catch (Exception except) {
					L.v("CallService", "ExceptionServiceServer");
					throw (new ExceptionServiceServer(context));
				}
			}
			else {
				L.v("CallService", "ExceptionServiceConnected");
				throw (new ExceptionServiceConnected(context));
			}
	}
	
	public static JSONObject getJsonPost(Context context, String url, List<String> nameData, List<String> data) throws ExceptionServiceServer, ExceptionServiceConnected {
		L.v("CallServicePost", "Post:In>"+url);
		if (isConnected(context)) {
			try {
				StringBuffer stringBuffer = null;
				HttpPost httppost = new HttpPost(url);
				
				try {
					List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(); //On cr√©e la liste qui contiendra tous nos param√®tres
				    	for (int i = 0; i < nameData.size(); i++) {
				    		L.v("CallServicePost", nameData.get(i) + " : " + data.get(i));
				    		nameValuePairs.add(new BasicNameValuePair(nameData.get(i), replaceAccent(data.get(i))));
				    	}
					httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
				    HttpParams params = new BasicHttpParams();
				    params.setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);
				    HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);
				    //HttpProtocolParams.setContentCharset(params, HTTP.ISO_8859_1);
				    HttpClient httpclient = new DefaultHttpClient(params);
				    HttpResponse response;
					try {
					    response = httpclient.execute(httppost);
					    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
						stringBuffer = new StringBuffer();
						String ligne;
						while((ligne = bufferedReader.readLine()) != null) {
							stringBuffer.append(ligne);
					        //L.v("CallServicePost", "ligne : " + ligne);
						}
						bufferedReader.close();
					} catch (ClientProtocolException e) {
				        L.v("CallServicePost", "Post: ClientProtocolException : " + e);
				    } catch (IOException e) {
				        L.v("CallServicePost", "Post: IOException : " + e);
				    }
		
				} catch (UnsupportedEncodingException e) {
					L.v("CallServicePost", "Post: UnsupportedEncodingException : " + e);
				}
				String fin = stringBuffer.toString().substring(stringBuffer.toString().indexOf("{"), stringBuffer.toString().lastIndexOf("}") + 1);
				JSONObject myjson = null;
				try {
					myjson = new JSONObject(fin);
				} catch (JSONException e) {
					e.printStackTrace();
					L.v("CallServicePost", "Post: JSONException , "+e);
				}
				return myjson;
			}
			catch (Exception except) {
				throw (new ExceptionServiceServer(context));
			}
		}
		else {
			throw (new ExceptionServiceConnected(context));
		}
	}
	
	private static void afficherString(String toDisplay) {
		if (toDisplay.length() > 100)
			for (int j = 0; j <= toDisplay.length() / 100 - 1; j++)
				L.v("CallService.afficherString", toDisplay.substring(j * 100, (j + 1) * 100 - 1));
	L.v("CallService.afficherString", toDisplay.substring((int)Math.floor(toDisplay.length() / 100) * 100, toDisplay.length() - 1));	
	}
	
	//D√©tecte si la connection est active
	public static boolean isConnected(Context context) {
		ConnectivityManager connectivityManager = (ConnectivityManager) context
		.getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();
		if (networkInfo != null) {
			//System.out.println(networkInfo.getTypeName()); // mobile ou WIFI
			State networkState = networkInfo.getState();
			if (networkState.compareTo(State.CONNECTED) == 0) {
				return true;
			}
		}
		//Toast.makeText(context, "Aucune connection internet n'est disponible.", Toast.LENGTH_SHORT).show();
		return false;
	}	

	public static String replaceAccent(String maString) { 
		
		maString = maString.replace(" ", "&#32;");
		maString = maString.replace(" ", "&#160;");
		maString = maString.replace("¬°", "&#161;");
		maString = maString.replace("¬¢", "&#162;");
		maString = maString.replace("¬£", "&#163;");
		maString = maString.replace("¬§", "&#164;");
		maString = maString.replace("¬•", "&#165;");
		maString = maString.replace("¬¶", "&#166;");
		maString = maString.replace("¬ß", "&#167;");
		maString = maString.replace("¬®", "&#168;");
		maString = maString.replace("¬©", "&#169;");
		maString = maString.replace("¬™", "&#170;");
		maString = maString.replace("¬´", "&#171;");
		maString = maString.replace("¬¨", "&#172;");
		//maString = maString.replace("		¬≠", "&#173;");
		maString = maString.replace("¬Æ", "&#174;");
		maString = maString.replace("¬Ø", "&#175;");
		maString = maString.replace("¬∞", "&#176;");
		maString = maString.replace("¬±", "&#177;");
		maString = maString.replace("¬≤", "&#178;");
		maString = maString.replace("¬≥", "&#179;");
		maString = maString.replace("¬¥", "&#180;");
		maString = maString.replace("¬µ", "&#181;");
		maString = maString.replace("¬∂", "&#182;");
		maString = maString.replace("¬∑", "&#183;");
		maString = maString.replace("¬∏", "&#184;");
		maString = maString.replace("¬π", "&#185;");
		maString = maString.replace("¬∫", "&#186;");
		maString = maString.replace("¬ª", "&#187;");
		maString = maString.replace("¬º", "&#188;");
		maString = maString.replace("¬Ω", "&#189;");
		maString = maString.replace("¬æ", "&#190;");
		maString = maString.replace("¬ø", "&#191;");
		maString = maString.replace("√Ä", "&#192;");
		maString = maString.replace("√?", "&#193;");
		maString = maString.replace("√Ç", "&#194;");
		maString = maString.replace("√É", "&#195;");
		maString = maString.replace("√Ñ", "&#196;");
		maString = maString.replace("√Ö", "&#197;");
		maString = maString.replace("√Ü", "&#198;");
		maString = maString.replace("√á", "&#199;");
		maString = maString.replace("√à", "&#200;");
		maString = maString.replace("√â", "&#201;");
		maString = maString.replace("√ä", "&#202;");
		maString = maString.replace("√ã", "&#203;");
		maString = maString.replace("√å", "&#204;");
		maString = maString.replace("√?", "&#205;");
		maString = maString.replace("√é", "&#206;");
		maString = maString.replace("√?", "&#207;");
		maString = maString.replace("√?", "&#208;");
		maString = maString.replace("√ë", "&#209;");
		maString = maString.replace("√í", "&#210;");
		maString = maString.replace("√ì", "&#211;");
		maString = maString.replace("√î", "&#212;");
		maString = maString.replace("√ï", "&#213;");
		maString = maString.replace("√ñ", "&#214;");
		maString = maString.replace("√ó", "&#215;");
		maString = maString.replace("√ò", "&#216;");
		maString = maString.replace("√ô", "&#217;");
		maString = maString.replace("√ö", "&#218;");
		maString = maString.replace("√õ", "&#219;");
		maString = maString.replace("√ú", "&#220;");
		maString = maString.replace("√?", "&#221;");
		maString = maString.replace("√û", "&#222;");
		maString = maString.replace("√ü", "&#223;");
		maString = maString.replace("√†", "&#224;");
		maString = maString.replace("√°", "&#225;");
		maString = maString.replace("√¢", "&#226;");
		maString = maString.replace("√£", "&#227;");
		maString = maString.replace("√§", "&#228;");
		maString = maString.replace("√•", "&#229;");
		maString = maString.replace("√¶", "&#230;");
		maString = maString.replace("√ß", "&#231;");
		maString = maString.replace("√®", "&#232;");
		maString = maString.replace("√©", "&#233;");
		maString = maString.replace("√™", "&#234;");
		maString = maString.replace("√´", "&#235;");
		maString = maString.replace("√¨", "&#236;");
		maString = maString.replace("√≠", "&#237;");
		maString = maString.replace("√Æ", "&#238;");
		maString = maString.replace("√Ø", "&#239;");
		maString = maString.replace("√∞", "&#240;");
		maString = maString.replace("√±", "&#241;");
		maString = maString.replace("√≤", "&#242;");
		maString = maString.replace("√≥", "&#243;");
		maString = maString.replace("√¥", "&#244;");
		maString = maString.replace("√µ", "&#245;");
		maString = maString.replace("√∂", "&#246;");
		maString = maString.replace("√∑", "&#247;");
		maString = maString.replace("√∏", "&#248;");
		maString = maString.replace("√π", "&#249;");
		maString = maString.replace("√∫", "&#250;");
		maString = maString.replace("√ª", "&#251;");
		maString = maString.replace("√º", "&#252;");
		maString = maString.replace("√Ω", "&#253;");
		maString = maString.replace("√æ", "&#254;");
		maString = maString.replace("√ø", "&#255;");
		maString = maString.replace("≈í", "&#338;");
		maString = maString.replace("≈ì", "&#339;");
		maString = maString.replace("≈†", "&#352;");
		maString = maString.replace("≈°", "&#353;");
		maString = maString.replace("≈∏", "&#376;");
		maString = maString.replace("∆í", "&#402;");
		maString = maString.replace("‚Äì", "&#8211;");
		maString = maString.replace("‚Äî", "&#8212;");
		maString = maString.replace("‚Äò", "&#8216;");
		maString = maString.replace("‚Äô", "&#8217;");
		maString = maString.replace("‚Äö", "&#8218;");
		maString = maString.replace("‚Äú", "&#8220;");
		maString = maString.replace("‚Ä?", "&#8221;");
		maString = maString.replace("‚Äû", "&#8222;");
		maString = maString.replace("‚Ä†", "&#8224;");
		maString = maString.replace("‚Ä°", "&#8225;");
		maString = maString.replace("‚Ä¢", "&#8226;");
		maString = maString.replace("‚Ä¶", "&#8230;");
		maString = maString.replace("‚Ä∞", "&#8240;");
		maString = maString.replace("‚Ç¨", "&#8364;");
		maString = maString.replace("‚Ñ¢", "&#8482;");
		//Log.v("replaceAccent", "APRES : " + maString);
		return maString;
	}

public static String replaceAccentHtmlToText(String maString) { 
		
		maString = maString.replace("&#32;", " ");
		maString = maString.replace("&#160;", " ");
		maString = maString.replace("&#161;", "¬°");
		maString = maString.replace("&#162;", "¬¢");
		maString = maString.replace("&#163;", "¬£");
		maString = maString.replace("&#164;", "¬§");
		maString = maString.replace("&#165;", "¬•");
		maString = maString.replace("&#166;", "¬¶");
		maString = maString.replace("&#167;", "¬ß");
		maString = maString.replace("&#168;", "¬®");
		maString = maString.replace("&#169;", "¬©");
		maString = maString.replace("&#170;", "¬™");
		maString = maString.replace("&#171;", "¬´");
		maString = maString.replace("&#172;", "¬¨");
		//maString = maString.replace("&#173;", "		¬≠");
		maString = maString.replace("&#174;", "¬Æ");
		maString = maString.replace("&#175;", "¬Ø");
		maString = maString.replace("&#176;", "¬∞");
		maString = maString.replace("&#177;", "¬±");
		maString = maString.replace("&#178;", "¬≤");
		maString = maString.replace("&#179;", "¬≥");
		maString = maString.replace("&#180;", "¬¥");
		maString = maString.replace("&#181;", "¬µ");
		maString = maString.replace("&#182;", "¬∂");
		maString = maString.replace("&#183;", "¬∑");
		maString = maString.replace("&#184;", "¬∏");
		maString = maString.replace("&#185;", "¬π");
		maString = maString.replace("&#186;", "¬∫");
		maString = maString.replace("&#187;", "¬ª");
		maString = maString.replace("&#188;", "¬º");
		maString = maString.replace("&#189;", "¬Ω");
		maString = maString.replace("&#190;", "¬æ");
		maString = maString.replace("&#191;", "¬ø");
		maString = maString.replace("&#192;", "√Ä");
		maString = maString.replace("&#193;", "√?");
		maString = maString.replace("&#194;", "√Ç");
		maString = maString.replace("&#195;", "√É");
		maString = maString.replace("&#196;", "√Ñ");
		maString = maString.replace("&#197;", "√Ö");
		maString = maString.replace("&#198;", "√Ü");
		maString = maString.replace("&#199;", "√á");
		maString = maString.replace("&#200;", "√à");
		maString = maString.replace("&#201;", "√â");
		maString = maString.replace("&#202;", "√ä");
		maString = maString.replace("&#203;", "√ã");
		maString = maString.replace("&#204;", "√å");
		maString = maString.replace("&#205;", "√?");
		maString = maString.replace("&#206;", "√é");
		maString = maString.replace("&#207;", "√?");
		maString = maString.replace("&#208;", "√?");
		maString = maString.replace("&#209;", "√ë");
		maString = maString.replace("&#210;", "√í");
		maString = maString.replace("&#211;", "√ì");
		maString = maString.replace("&#212;", "√î");
		maString = maString.replace("&#213;", "√ï");
		maString = maString.replace("&#214;", "√ñ");
		maString = maString.replace("&#215;", "√ó");
		maString = maString.replace("&#216;", "√ò");
		maString = maString.replace("&#217;", "√ô");
		maString = maString.replace("&#218;", "√ö");
		maString = maString.replace("&#219;", "√õ");
		maString = maString.replace("&#220;", "√ú");
		maString = maString.replace("&#221;", "√?");
		maString = maString.replace("&#222;", "√û");
		maString = maString.replace("&#223;", "√ü");
		maString = maString.replace("&#224;", "√†");
		maString = maString.replace("&#225;", "√°");
		maString = maString.replace("&#226;", "√¢");
		maString = maString.replace("&#227;", "√£");
		maString = maString.replace("&#228;", "√§");
		maString = maString.replace("&#229;", "√•");
		maString = maString.replace("&#230;", "√¶");
		maString = maString.replace("&#231;", "√ß");
		maString = maString.replace("&#232;", "√®");
		maString = maString.replace("&#233;", "√©");
		maString = maString.replace("&#234;", "√™");
		maString = maString.replace("&#235;", "√´");
		maString = maString.replace("&#236;", "√¨");
		maString = maString.replace("&#237;", "√≠");
		maString = maString.replace("&#238;", "√Æ");
		maString = maString.replace("&#239;", "√Ø");
		maString = maString.replace("&#240;", "√∞");
		maString = maString.replace("&#241;", "√±");
		maString = maString.replace("&#242;", "√≤");
		maString = maString.replace("&#243;", "√≥");
		maString = maString.replace("&#244;", "√¥");
		maString = maString.replace("&#245;", "√µ");
		maString = maString.replace("&#246;", "√∂");
		maString = maString.replace("&#247;", "√∑");
		maString = maString.replace("&#248;", "√∏");
		maString = maString.replace("&#249;", "√π");
		maString = maString.replace("&#250;", "√∫");
		maString = maString.replace("&#251;", "√ª");
		maString = maString.replace("&#252;", "√º");
		maString = maString.replace("&#253;", "√Ω");
		maString = maString.replace("&#254;", "√æ");
		maString = maString.replace("&#255;", "√ø");
		maString = maString.replace("&#338;", "≈í");
		maString = maString.replace("&#339;", "≈ì");
		maString = maString.replace("&#352;", "≈†");
		maString = maString.replace("&#353;", "≈°");
		maString = maString.replace("&#376;", "≈∏");
		maString = maString.replace("&#402;", "∆í");
		maString = maString.replace("&#8211;", "‚Äì");
		maString = maString.replace("&#8212;", "‚Äî");
		maString = maString.replace("&#8216;", "‚Äò");
		maString = maString.replace("&#8217;", "‚Äô");
		maString = maString.replace("&#8218;", "‚Äö");
		maString = maString.replace("&#8220;", "‚Äú");
		maString = maString.replace("&#8221;", "‚Ä?");
		maString = maString.replace("&#8222;", "‚Äû");
		maString = maString.replace("&#8224;", "‚Ä†");
		maString = maString.replace("&#8225;", "‚Ä°");
		maString = maString.replace("&#8226;", "‚Ä¢");
		maString = maString.replace("&#8230;", "‚Ä¶");
		maString = maString.replace("&#8240;", "‚Ä∞");
		maString = maString.replace("&#8364;", "‚Ç¨");
		maString = maString.replace("&#8482;" ,"‚Ñ¢" );
		//Log.v("replaceAccent", "APRES : " + maString);
		return maString;
	}
	
	public static void setParam(HttpClient myDefaultHttpClient, boolean isUTF8) {
		HttpParams params = new BasicHttpParams();
	    params.setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);
	    if (isUTF8) {
	    	HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);
	    }
	    else {
	    	HttpProtocolParams.setContentCharset(params, HTTP.ISO_8859_1);
	    }
	    //httpClient.setParams(params);
	    ((DefaultHttpClient) myDefaultHttpClient).setParams(params);	
	}

	public static void setParam(HttpPost httpPost, boolean isUTF8) {
		HttpParams params = new BasicHttpParams();
	    params.setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);
	    if (isUTF8) {
		    HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);
	    }
	    else {
	    	HttpProtocolParams.setContentCharset(params, HTTP.ISO_8859_1);
	    }
	    httpPost.setParams(params);
	}
	
	public static void setParam(HttpResponse httpResponse, boolean isUTF8) {
		HttpParams params = new BasicHttpParams();
	    params.setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);
	    if (isUTF8) {
	    	HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);
	    }
	    else {
		    HttpProtocolParams.setContentCharset(params, HTTP.ISO_8859_1);
	    }
	    httpResponse.setParams(params);
	}

	public static HttpResponse askForSomething(String url, HttpClient myDefaultHttpClient, boolean isUTF8) {
	    //L.v("CallSerive", "AskForSomething : " + url);
		HttpPost httpPost = new HttpPost(url);
		setParam(httpPost, isUTF8);
	    try {
	    	setParam(myDefaultHttpClient, isUTF8);
	    	HttpResponse httpResponse = myDefaultHttpClient.execute(httpPost);
	    	return httpResponse;
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	    return null;
	}
	
	public static HttpResponse askForSomethingWithPost(String url, HttpClient myDefaultHttpClient, List<String> nameData, List<String> valeurData, boolean isUTF8) {
	    L.v("CallSerive", "AskForSomethingWithPost : " + url);
	    try {
		    List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(); //On cr√©e la liste qui contiendra tous nos param√®tres
		    L.v("CallService", "size post = " + nameData.size() + ", " + valeurData.size());
	    	for (int i = 0; i < nameData.size(); i++) {
	    		L.v("CallService", "Ajout des donn√©es post : " + nameData.get(i) + " : " + valeurData.get(i));
	    		nameValuePairs.add(new BasicNameValuePair(nameData.get(i), valeurData.get(i)));
	    	}
	    	setParam(myDefaultHttpClient, isUTF8);
	    	HttpPost httppost = new HttpPost(url);
			//setParam(httppost);
			httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
		    
		    return myDefaultHttpClient.execute(httppost);
	    } catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	    return null;
	}
	

	
	public static HttpResponse askForResponse(String url, HttpClient myDefaultHttpClient, boolean isUTF8, String... dataPost) {
	    L.v("CallSerive", "AskForSomethingWithPost : " + url);
	    try {
	    	HttpPost httppost = new HttpPost(url);
		    List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
	    	if (dataPost != null && dataPost.length != 0 && (dataPost.length % 2) == 0) {
	    		for (int i = 0; i < dataPost.length / 2; i++) {
		    		nameValuePairs.add(new BasicNameValuePair(dataPost[i* 2], dataPost[i* 2 + 1]));
	    		}
	    		httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
	    	}
	    	setParam(myDefaultHttpClient, isUTF8);
			httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
		    
		    return myDefaultHttpClient.execute(httppost);
	    } catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	    return null;
	}
	
	public static JSONObject askForJSON(String url, HttpClient myDefaultHttpClient, boolean isUTF8, String... dataPost) {
	    L.v("CallSerive", "AskForSomethingWithPost : " + url);
	    try {
	    	HttpPost httppost = new HttpPost(url);
		    List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
	    	if (dataPost != null && dataPost.length != 0 && (dataPost.length % 2) == 0) {
	    		for (int i = 0; i < dataPost.length / 2; i++) {
		    		nameValuePairs.add(new BasicNameValuePair(dataPost[i* 2], dataPost[i* 2 + 1]));
	    		}
	    		httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
	    	}
	    	setParam(myDefaultHttpClient, isUTF8);
		    
			HttpResponse response = myDefaultHttpClient.execute(httppost);
		    
		    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
			StringBuffer stringBuffer = new StringBuffer();
			String ligne;
			while((ligne = bufferedReader.readLine()) != null) {
				stringBuffer.append(ligne);
			}
			bufferedReader.close();
		    
		    if (stringBuffer.length() > 0) {
				String fin = stringBuffer.toString().substring(stringBuffer.toString().indexOf("{"), stringBuffer.toString().lastIndexOf("}") + 1);
				try {
					return new JSONObject(fin);
				} catch (JSONException e) {
					e.printStackTrace();
					L.v("CallService", "Geth: JSONException , " + e);
					fin = fin.replaceAll("<input type=\"hidden\" name=\"sid\" value=\"[a-z0-9]+\" />", "");
				}
			}
	    } catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	    return null;
	}
	
}

